@page "/"
@using Microsoft.AspNetCore.Authorization
@using ServersideprogrammeringH5.Codes
@using ServersideprogrammeringH5.Data
@using ServersideprogrammeringH5.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Policy = "AuthenticatedUser")]

@inject Codes.EncryptionHandler _encryptionHandler
@inject Codes.HashingHandler _hashingHandler
@inject Codes.AsymetriskEncryptionHandler _asymetriskencyptionHandler

<PageTitle>Home</PageTitle>
<h1>User:  @UserName!</h1>
@if (IsAuthenticated)
{
    <div>
        @if (string.IsNullOrEmpty(UserCPR))
        {
            <form @onsubmit="SubmitCPR">
                <input type="text" @bind="CPRNumber" />
                <button type="submit">Submit CPR</button>
            </form>
        }
        else
        {
            <p>Hashed CPR: @UserCPR</p>
            <br />
            @if (ShowTodoForm)
            {
                <form @onsubmit="(e) => AddTodoItem(new ToDoList { Item = TodoContent}, UserName)">
                    <input type="text" @bind="TodoContent" />
                    <button type="submit">Add Todo Item</button>
                </form>
            }
        }
    </div>
}
else
{
    <p>Please log in to continue.</p>
}

@code {
    private string CPRNumber = "";
    private string TodoContent = "";
    private bool ShowTodoForm = false; // Control variable for showing the todo form
    private bool CPRSubmitted = false; // Flag indicating whether CPR has been submitted
    private string UserCPR = ""; // Declaration of UserCPR variable

    private bool IsAuthenticated => authenticationState?.User?.Identity?.IsAuthenticated ?? false;
    private string UserName => authenticationState?.User?.Identity?.Name ?? "";

    private AuthenticationState authenticationState;
    // Inject ToDoContext using dependency injection
    [Inject]
    private ToDoContext _context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //_encryptionHandler.EncryptSymetrisk("Hi Bilal");
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task SubmitCPR()
    {
        // Check if CPRNumber is not empty
        if (!string.IsNullOrEmpty(CPRNumber))
        {
            // Hash the CPR number
            string hashedCPR = _hashingHandler.HashCPR(CPRNumber);

            // Save the hashed information in the database
            await _hashingHandler.SubmitCPR(hashedCPR, UserName, 1); // Pass user ID as needed

            // Set ShowTodoForm to true to display the todo form
            ShowTodoForm = true;
            // Set CPRSubmitted flag to true
            CPRSubmitted = true;
            // Set UserCPR to hashedCPR
            UserCPR = hashedCPR;
            // Reset CPRNumber
            CPRNumber = "";
        }
    }

    private async Task AddTodoItem(ToDoList newItem, string user)
    {
        if (_asymetriskencyptionHandler == null)
        {
            return;
        }

        await _asymetriskencyptionHandler.AddTodoItem(newItem, user);

        TodoContent = "";

        Console.WriteLine($"Newly added item: {newItem.Item}");
    }
}
