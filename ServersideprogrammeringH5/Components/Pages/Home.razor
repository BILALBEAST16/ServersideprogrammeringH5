@page "/"
@using Microsoft.AspNetCore.Authorization
@using ServersideprogrammeringH5.Codes
@using ServersideprogrammeringH5.Data
@using ServersideprogrammeringH5.Models
@using Microsoft.EntityFrameworkCore;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Codes.AsymetriskEncryptionHandler _asymetriskEncryptionHandler
@inject Codes.HashingHandler _hashingHandler
@inject Codes.EncryptionHandler _encryptionHandler


<PageTitle>Home</PageTitle>
<h1>User: @UserName!</h1>
@if (IsAuthenticated)
{
            <h2>Current User:</h2>
            <p>@UserName</p>
        
        @if (string.IsNullOrEmpty(UserCPR))
        {
            <form @onsubmit="SubmitCPR" style="margin-right: 20px;">
                <input type="text" @bind="CPRNumber" placeholder="Enter CPR" />
                <button type="submit">Submit CPR</button>
            </form>
        }
        else
        {
                <p>Hashed CPR: @UserCPR</p>
                @if (ShowTodoForm)
                {
                    <form @onsubmit="(e) => AddTodoItem(new ToDoList { Item = TodoContent}, UserName)">
                        <input type="text" @bind="TodoContent" placeholder="Enter Todo Item" />
                        <button type="submit">Add Todo Item</button>
                    </form>
                }
            <div>
                @if (DecryptedTodoItems != null && DecryptedTodoItems.Any())
                {
                    <h2>ToDo List:</h2>
                    @foreach (var item in DecryptedTodoItems)
                    {
                        <p>@item</p>
                    }
                }
            </div>
        }
}
else
{
    <p>Please log in to continue.</p>
}


@code {
    private string CPRNumber = "";
    private string TodoContent = "";
    private bool ShowTodoForm = false; // Control variable for showing the todo form
    private bool CPRSubmitted = false; // Flag indicating whether CPR has been submitted
    private string UserCPR = ""; // Declaration of UserCPR variable
    private List<string> DecryptedTodoItems = new List<string>(); // List to store decrypted todo items

    private bool IsAuthenticated => authenticationState?.User?.Identity?.IsAuthenticated ?? false;
    private string UserName => authenticationState?.User?.Identity?.Name ?? "";

    private AuthenticationState authenticationState;
    // Inject ToDoContext using dependency injection
    [Inject]
    private ToDoContext _context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task SubmitCPR()
    {
        // Check if CPRNumber is not empty
        if (!string.IsNullOrEmpty(CPRNumber))
        {
            // Hash the CPR number
            string hashedCPR = _hashingHandler.HashCPR(CPRNumber);

            // Save the hashed information in the database
            await _hashingHandler.SubmitCPR(hashedCPR, UserName, 1); // Pass user ID as needed

            // Set ShowTodoForm to true to display the todo form
            ShowTodoForm = true;
            // Set CPRSubmitted flag to true
            CPRSubmitted = true;
            // Set UserCPR to hashedCPR
            UserCPR = hashedCPR;
            // Reset CPRNumber
            CPRNumber = "";
        }
    }

    private async Task AddTodoItem(ToDoList newItem, string user)
    {
        if (_asymetriskEncryptionHandler == null)
        {
            return;
        }

        await _asymetriskEncryptionHandler.AddTodoItem(newItem, user);

        TodoContent = "";
        // Update the list of decrypted todo items
        DecryptedTodoItems = await GetDecryptedTodoItems();
    }

    // Method to retrieve decrypted todo items from the database
    private async Task<List<string>> GetDecryptedTodoItems()
    {
        var todoItems = await _context.ToDoLists.ToListAsync();
        return todoItems.Select(item => _asymetriskEncryptionHandler.DecryptAsymetrisk(item.Item)).ToList();
    }
}
